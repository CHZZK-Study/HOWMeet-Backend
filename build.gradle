buildscript {
    ext {
        restdocsApiSpecVersion = '0.16.2'
    }
}

// spring boot 버전
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.epages.restdocs-api-spec' version '0.18.4'
    id 'org.hidetake.swagger.generator' version '2.18.2'
}

// group, version
group = 'com.howmeet'
version = '0.0.1-SNAPSHOT'

// java version
java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

// 의존성
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // MySQL
    runtimeOnly 'mysql:mysql-connector-java:8.0.33'

    // H2
    implementation 'com.h2database:h2'

    // QueryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 에러 대응 코드
    annotationProcessor "jakarta.persistence:jakarta.persistence-api" // java.lang.NoClassDefFoundError (javax.annotation.Entity) 에러 대응 코드
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // jBCrypt
    implementation group: 'org.mindrot', name: 'jbcrypt', version: '0.4'

    // Swagger
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    swaggerUI 'org.webjars:swagger-ui:4.11.1'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // WebFlux (WebClient)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // BadWordFilter (비속어 필터링 라이브러리)
    implementation 'io.github.vaneproject:badwordfiltering:1.0.0'


    // Spring Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.4'
    testImplementation 'org.mockito:mockito-core:4.0.0'

    // Bean Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //fcm
    implementation 'com.google.firebase:firebase-admin:9.1.1'
    implementation 'com.google.guava:guava:32.1.2-jre'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // Google Cloud SQL
    implementation 'com.google.cloud.sql:mysql-socket-factory:1.8.0'

}


// Querydsl 빌드 옵션 (옵셔널)
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

ext {
    snippetsDir = file('build/generated-snippets')
}

tasks.named('test') {
    useJUnitPlatform()
//    exclude '**/GuestRepositoryTest.*'
    exclude '**/*RepositoryTest.*'

}

tasks.withType(GenerateSwaggerUI) {
    dependsOn 'openapi3'

    def docsDir = file('build/resources/main/static/docs')
    if (!docsDir.exists()) {
        docsDir.mkdirs()
        println "Created directory: ${docsDir}"
    }

    delete file('src/main/resources/static/docs/')
    copy {
        from "build/resources/main/static/docs"
        into "src/main/resources/static/docs/"
    }
}

openapi3 {
    server = "http://localhost:8080"
    title = "HOWMeet API 문서"
    description = "Spring REST Docs with SwaggerUI."
    version = "0.0.1"
    outputFileNamePrefix = 'SAMPLE - 0.0.1'
    format = 'json'

    outputDirectory = 'build/resources/main/static/docs'
}

bootJar {
    dependsOn(':openapi3')
}